#include <stdio.h>
#include <stdlib.h>

int max_size=1000;
int ret;
const int V = 4;
typedef struct queue
{
    int front;
    int rear;
    int size;
    int elements[1000];

}qu;
// initialize queue
void create_queue(qu *pq)
{
    pq->front=0;
    pq->rear=-1;
    pq->size=0;
}
// Enter an element
void appand(int el,qu *pq)
{
        if(pq->rear == max_size-1)
        {
            pq->rear=0;
        }
        else{pq->rear++;}
        pq->elements[pq->rear]=el;
        pq->size++;
}

// read an element
int serve(qu * pq)
{
    if(pq->front == max_size-1)
        {
            pq->front=0;
            ret= pq->elements[pq->front];
        }
        else{ ret= pq->elements[pq->front++];}

        pq->size--;
       return ret;
}


int check_Bipartite(int graph[][V], int info, int color[])
{
    color[info] = 1;


    qu q;
    create_queue(&q);
    appand(info,&q);

    while (q.size != 0) {  // check size

        int u = serve(&q);
        if (graph[u][u] == 1)
            return 0;


        for (int v = 0; v < V; ++v) {
            if (graph[u][v] && color[v] == -1) {
                color[v] = 1 - color[u];
                appand(v,&q);
            }
            else if (graph[u][v] && color[v] == color[u])
                return 0;
        }
    }

    return 1;
}


int isBipartite(int graph[][V])
{
    int color[V];
    for (int i = 0; i < V; ++i)
        color[i] = -1;

    for (int i = 0; i < V; i++)
        if (color[i] == -1)
            if (check_Bipartite(graph, i, color) == 0)
                return 0;

    return 1;
}

int main()
{
    int graph[][4] = { { 0, 1, 0, 1 },
                   { 1, 0, 1, 0 },
                   { 0, 1, 0, 1 },
                   { 1, 0, 1, 0 } };

    isBipartite(graph) ? printf("Yes")  :printf("No") ;
    return 0;
}
